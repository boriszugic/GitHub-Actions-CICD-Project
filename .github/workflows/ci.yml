name: ci

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: cicdprojectregistry.azurecr.io
  IMAGE_NAME: flask-app
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  tests-and-scans:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2) unit tests
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: install deps & run tests
      run: |
        pip install -r requirements.txt
        pytest                    # non‑zero exit code = job stops here

    # 3) secret scan
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 4) SonarQube Quality Gate
    - uses: SonarSource/sonarqube-scan-action@v2
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORG }}
          -Dsonar.qualitygate.wait=true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

    # 5) ACR login
    - uses: azure/docker-login@v2
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # 6) build & push image
    - uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    # 7) Trivy vulnerability scan (fail on CRITICAL/HIGH)
    - uses: aquasecurity/trivy-action@0.31.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        severity: 'CRITICAL,HIGH'
        exit-code: '0'            # hard‑fail if bad vulns found
